{"version":3,"file":"index.js","mappings":"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","sources":["webpack://xatlas-three/webpack/bootstrap","webpack://xatlas-three/webpack/runtime/define property getters","webpack://xatlas-three/webpack/runtime/hasOwnProperty shorthand","webpack://xatlas-three/./src/UVUnwrapper.ts","webpack://xatlas-three/./src/baseXAtlas.ts","webpack://xatlas-three/./node_modules/comlink/dist/esm/comlink.mjs","webpack://xatlas-three/./src/XAtlasWebWorker.ts","webpack://xatlas-three/./src/unwrapperWorker.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import type {BufferGeometry, Mesh, BufferAttribute} from \"three\";\r\nimport type {XAtlasWebWorker} from \"./XAtlasWebWorker\";\r\nimport type {XAtlasJS} from \"./XAtlasJS\";\r\n\r\nexport type Class<T> = new (...args: any[]) => T\r\n\r\nexport interface ChartOptions{\r\n    maxIterations?: number,\r\n    straightnessWeight?: number,\r\n    textureSeamWeight?: number,\r\n    useInputMeshUvs?: boolean,\r\n    maxChartArea?: number,\r\n    normalDeviationWeight?: number,\r\n    maxCost?: number,\r\n    roundnessWeight?: number,\r\n    maxBoundaryLength?: number,\r\n    normalSeamWeight?: number,\r\n    fixWinding?: boolean\r\n}\r\nexport interface PackOptions{\r\n    maxChartSize?: number,\r\n    padding?: number,\r\n    bilinear?: boolean,\r\n    createImage?: boolean,\r\n    rotateCharts?: boolean,\r\n    rotateChartsToAxis?: boolean,\r\n    blockAlign?: boolean,\r\n    resolution?: number,\r\n    bruteForce?: boolean,\r\n    texelsPerUnit?: number\r\n}\r\n\r\n/**\r\n * Base class for unwrapping three.js geometries using xatlas. Check the usage guide at https://github.com/repalash/xatlas-three\r\n * @license\r\n * Copyright 2022 repalash\r\n * SPDX-License-Identifier: MIT\r\n */\r\nexport abstract class BaseUVUnwrapper{\r\n    private xAtlas: XAtlasWebWorker | XAtlasJS;\r\n\r\n    /**\r\n     *\r\n     * @param THREE - for reference to BufferAttribute\r\n     * @param packOptions - options for packing\r\n     * @param chartOptions - options for unwrapping\r\n     * @param useNormals - If true, will use the normals to calculate the uv\r\n     * @param timeUnwrap - Logs the time taken to unwrap geometries\r\n     * @param logProgress - Logs the unwrapping progress\r\n     */\r\n    constructor(\r\n        public THREE: { BufferAttribute: Class<BufferAttribute> },\r\n        public packOptions: PackOptions = {\r\n            resolution: 2048,\r\n        },\r\n        public chartOptions: ChartOptions = {},\r\n        public useNormals: boolean = false,\r\n        public timeUnwrap: boolean = false,\r\n        public logProgress: boolean = false,\r\n    ) {\r\n        this.xAtlas = this._createXAtlas()\r\n    }\r\n    private _libraryLoaded = false;\r\n    async loadLibrary(onProgress: (mode: any, progress: any)=>void, wasmFilePath: string, workerFilePath?: string): Promise<void>{\r\n        if(this._libraryLoaded) return\r\n        await new Promise<void>((resolve, reject) => {\r\n            try {\r\n                this.xAtlas.init(resolve, onProgress, wasmFilePath, workerFilePath)\r\n            } catch (e) {\r\n                reject(e)\r\n            }\r\n        })\r\n        while (!(this.xAtlas.api ? await this.xAtlas.api.loaded : false)){\r\n            await new Promise(r => setTimeout(r, 100)); // wait for load just in case\r\n        }\r\n        this._libraryLoaded = true;\r\n    }\r\n\r\n    private _isUnwrapping = false;\r\n\r\n    /**\r\n     * Pack multiple geometry into a single atlas\r\n     * @param nodeList - list of geometries to unwrap\r\n     * @param outputUv - Attribute to write the output uv to\r\n     * @param inputUv - Attribute to write the input uv to (if any)\r\n     */\r\n    public async packAtlas(nodeList: BufferGeometry[], outputUv: 'uv'|'uv2' = 'uv2', inputUv: 'uv'|'uv2' = 'uv'): Promise<BufferGeometry[]>{\r\n        if(!this._libraryLoaded) {\r\n            console.warn('xatlas-three: library not loaded')\r\n            return [];\r\n        }\r\n        if (!nodeList) return [];\r\n        if(nodeList.length < 1) return [];\r\n        const useUvs = this.chartOptions.useInputMeshUvs;\r\n\r\n        while (this._isUnwrapping){\r\n            console.log(\"xatlas-three: unwrapping another mesh, waiting 100 ms\");\r\n            await new Promise(r => setTimeout(r, 100));\r\n        }\r\n        // if(!(xAtlas.loaded)) { // when not using worker. todo\r\n        // xAtlas.addOnLoad(proxy(()=>xAtlasUnWrapLiteGLMeshes(nodeList, onFinish, chartOptions, packOptions, useNormals, useUvs, resultAttribute, originalAttribute)));\r\n        // return;\r\n        // }\r\n        this._isUnwrapping = true;\r\n\r\n        await this.xAtlas.api.setProgressLogging(this.logProgress);\r\n        await this.xAtlas.api.createAtlas();\r\n        let meshAdded = [];\r\n        let tag = \"\"; // for time logging\r\n        for(let mesh of nodeList){\r\n            let {uuid, index, attributes} = mesh;\r\n            const scaled = mesh.userData.worldScale || 1; // can be [number, number, number] or number\r\n\r\n            // if (unwrap === false) continue;\r\n\r\n            meshAdded.push(uuid);\r\n            if(!index || !attributes.position || attributes.position!.itemSize !== 3){\r\n                console.warn(\"xatlas-three: Geometry not supported: \", mesh)\r\n                continue;\r\n            }\r\n            tag = \"Mesh\" + meshAdded.length + \" added to atlas: \" + uuid;\r\n            // console.log(typeof index.array)\r\n            if(this.timeUnwrap) console.time(tag);\r\n            await this.xAtlas.api.addMesh(index.array, (attributes.position as BufferAttribute).array, attributes.normal ? (attributes.normal as BufferAttribute).array: undefined, attributes.uv ? (attributes.uv as BufferAttribute).array : undefined, uuid, this.useNormals, useUvs, scaled);\r\n            if(this.timeUnwrap) console.timeEnd(tag);\r\n        }\r\n        tag = \"Generated atlas with \" + meshAdded.length + \" meshes\";\r\n        if(this.timeUnwrap) console.time(tag);\r\n        const atlas = await this.xAtlas.api.generateAtlas(this.chartOptions, this.packOptions, true);\r\n        if(this.timeUnwrap) console.timeEnd(tag);\r\n        let ret = [];\r\n        console.log(atlas)\r\n        for(let m of atlas.meshes){\r\n            /**\r\n             * @type {Mesh}\r\n             */\r\n            let mesh = nodeList.find(n => n.uuid === m.mesh)\r\n            if(!mesh) {\r\n                console.error(\"xatlas-three: Mesh not found: \", m.mesh)\r\n                continue;\r\n            }\r\n            // if(mesh.getAttribute(\"position\"))\r\n            //     mesh.deleteAttribute(\"position\");\r\n            // if(mesh.getAttribute(\"normal\") && m.vertex.normal)\r\n            //     mesh.deleteAttribute(\"normal\");\r\n            // if(mesh.getAttribute(\"uv\") && m.vertex.uv)\r\n            //     mesh.deleteAttribute(\"uv\");\r\n            // if(mesh.getAttribute(\"uv2\"))\r\n            //     mesh.deleteAttribute(\"uv2\");\r\n            // if(mesh.getIndex())\r\n            //     mesh.setIndex(null);\r\n\r\n            if(m.vertex.vertices) mesh.setAttribute('position', new this.THREE.BufferAttribute(m.vertex.vertices, 3, false));\r\n            if(m.vertex.normals) mesh.setAttribute('normal', new this.THREE.BufferAttribute(m.vertex.normals, 3, true));\r\n            if(m.vertex.tangents) mesh.setAttribute('tangent', new this.THREE.BufferAttribute(m.vertex.tangents, 4, true));\r\n            if(m.vertex.coords1) mesh.setAttribute(outputUv, new this.THREE.BufferAttribute(m.vertex.coords1, 2, false));\r\n            if(m.vertex.coords&&outputUv!==inputUv) mesh.setAttribute(inputUv, new this.THREE.BufferAttribute(m.vertex.coords, 2, false));\r\n            if(m.index) mesh.setIndex(new this.THREE.BufferAttribute(m.index, 1, false));\r\n            if(m.subMeshes){\r\n                console.log(m.subMeshes)\r\n                if(mesh.groups?.length){\r\n                    console.warn(\"xatlas-three: Mesh already has groups, clearing them\")\r\n                    mesh.clearGroups();\r\n                }\r\n                for(let subMesh of m.subMeshes) mesh.addGroup(subMesh.start, subMesh.count, 0);\r\n            }\r\n            console.log(mesh)\r\n\r\n            ret.push(mesh);\r\n        }\r\n\r\n        await this.xAtlas.api.destroyAtlas();\r\n        this._isUnwrapping = false;\r\n\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Unwraps a geometry to generate uv\r\n     * @param geometry\r\n     * @param outputUv\r\n     * @param inputUv\r\n     */\r\n    public async unwrapGeometry(geometry: BufferGeometry, outputUv: 'uv'|'uv2' = 'uv', inputUv: 'uv'|'uv2' = 'uv2'){\r\n        return this.packAtlas([geometry], outputUv, inputUv);\r\n    }\r\n\r\n    protected abstract _createXAtlas(): any;\r\n\r\n}\r\n","export abstract class BaseXAtlas {\r\n    api: any\r\n\r\n    abstract init(onLoad: () => void, onProgress: (mode: any, progress: any) => void, wasmFilePath: string, workerFilePath?: string): void\r\n}\r\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    return createProxy(ep, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        ep.addEventListener(\"message\", function l(ev) {\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\n                return;\n            }\n            ep.removeEventListener(\"message\", l);\n            resolve(ev.data);\n        });\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n","import {BaseXAtlas} from \"./baseXAtlas\";\r\nimport {proxy, wrap} from \"comlink\";\r\n\r\nexport class XAtlasWebWorker extends BaseXAtlas {\r\n\r\n    init(onLoad: () => void, onProgress: (mode: any, progress: any) => void, wasmFilePath: string, workerFilePath?: string): void {\r\n        if (this.api) return\r\n        if(!workerFilePath) throw new Error(\"workerFilePath is required\");\r\n        (async () => {\r\n            const workerCode = await fetch(workerFilePath).then(res => res.blob());\r\n            const workerUrl = URL.createObjectURL(workerCode);\r\n            const t = new Worker(workerUrl, {type: 'module', });\r\n            // @ts-ignore\r\n            this.api = await (new (wrap(t))(\r\n                    proxy(()=>{\r\n                        onLoad();\r\n                        URL.revokeObjectURL(workerUrl);\r\n                    }),\r\n                    proxy((path: string, dir: string) => {\r\n                        return (path === \"xatlas.wasm\" ? wasmFilePath : path + dir)\r\n                    }),\r\n                    proxy(onProgress))\r\n            )\r\n        })()\r\n    }\r\n\r\n}\r\n","import {BaseUVUnwrapper} from \"./UVUnwrapper\";\r\nimport {XAtlasWebWorker} from \"./XAtlasWebWorker\";\r\n\r\nexport class UVUnwrapper extends BaseUVUnwrapper{\r\n    protected _createXAtlas(): any {\r\n        return new XAtlasWebWorker()\r\n    }\r\n}\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","BaseUVUnwrapper","constructor","THREE","packOptions","resolution","chartOptions","useNormals","timeUnwrap","logProgress","_libraryLoaded","_isUnwrapping","this","xAtlas","_createXAtlas","loadLibrary","onProgress","wasmFilePath","workerFilePath","Promise","resolve","reject","init","e","api","loaded","r","setTimeout","packAtlas","nodeList","outputUv","inputUv","console","warn","length","useUvs","useInputMeshUvs","log","setProgressLogging","createAtlas","meshAdded","tag","mesh","uuid","index","attributes","scaled","userData","worldScale","push","position","itemSize","time","addMesh","array","normal","undefined","uv","timeEnd","atlas","generateAtlas","ret","m","meshes","find","n","vertex","vertices","setAttribute","BufferAttribute","normals","tangents","coords1","coords","setIndex","subMeshes","groups","clearGroups","subMesh","addGroup","start","count","error","destroyAtlas","unwrapGeometry","geometry","BaseXAtlas","proxyMarker","Symbol","createEndpoint","releaseProxy","finalizer","throwMarker","isObject","val","transferHandlers","Map","canHandle","serialize","port1","port2","MessageChannel","expose","deserialize","port","wrap","value","serialized","Error","isError","message","name","stack","assign","ep","globalThis","allowedOrigins","addEventListener","callback","ev","data","origin","allowedOrigin","RegExp","test","isAllowedOrigin","id","type","path","argumentList","map","fromWireValue","returnValue","parent","slice","reduce","rawValue","apply","proxy","transfers","transferCache","set","transfer","catch","then","wireValue","transferables","toWireValue","postMessage","removeEventListener","closeEndPoint","TypeError","endpoint","isMessagePort","close","target","createProxy","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","WeakMap","proxyFinalizers","FinalizationRegistry","newCount","isProxyReleased","Proxy","_target","unregister","unregisterProxy","p","toString","bind","_thisArg","rawArgumentList","last","processArguments","construct","register","registerProxy","processed","v","arr","Array","concat","handler","serializedValue","msg","fill","Math","floor","random","Number","MAX_SAFE_INTEGER","join","l","XAtlasWebWorker","onLoad","workerCode","fetch","res","blob","workerUrl","URL","createObjectURL","t","Worker","revokeObjectURL","dir","UVUnwrapper"],"sourceRoot":""}